$primary-color-1: #28f;
$primary-color-2: #82f;
$primary-color-3: #abf;
$primary-color-4: #ff8;
$primary-color-5: #f88;
$primary-color-6: #8ff;

$shadow-1: 0 0 0 5px #2288ff33, 0 0 0 10px #2288ff22, 0 0 20px $primary-color-1, 0 0 50px $primary-color-1;
$shadow-2: 0 0 0 5px #8822ff33, 0 0 0 10px #8822ff22, 0 0 20px $primary-color-2, 0 0 50px $primary-color-2;
$shadow-3: 0 0 0 5px #aabbff33, 0 0 0 10px #aabbff22, 0 0 20px $primary-color-3, 0 0 50px $primary-color-3;
$shadow-4: 0 0 0 5px #ffdd8833, 0 0 0 10px #ffdd8822, 0 0 20px $primary-color-4, 0 0 50px $primary-color-4;
$shadow-5: 0 0 0 5px #ff228833, 0 0 0 10px #ff228822, 0 0 20px $primary-color-5, 0 0 50px $primary-color-5;
$shadow-6: 0 0 0 5px #88ffff33, 0 0 0 10px #88ffff22, 0 0 20px $primary-color-6, 0 0 50px $primary-color-6;

// Define maps for sizes, colors, and shadows
$sizes: (
  1: 200px,
  2: 400px,
  3: 600px,
  4: 800px,
  5: 1000px,
  6: 1200px,
);

$primary-colors: (
  1: $primary-color-1,
  2: $primary-color-2,
  3: $primary-color-3,
  4: $primary-color-4,
  5: $primary-color-5,
  6: $primary-color-6,
);

$shadows: (
  1: $shadow-1,
  2: $shadow-2,
  3: $shadow-3,
  4: $shadow-4,
  5: $shadow-5,
  6: $shadow-6,
);

h2 {
  font-family: 'ZeroCool';
}

.atom {
  display: flex;
  justify-content: center;
  align-items: center;
  position: absolute;
  width: 100%;
  height: 100vh;
  bottom: 0;

  > .molecule {
    position: absolute;
    border-radius: 50%;
    opacity: 0.25;

    &::before {
      content: '';
      position: absolute;
      width: 30px;
      height: 30px;
      border-radius: 50%;
      top: 50%;
      left: 100%;
      transform: translate(-50%, -50%);
    }

    // Loop through 1 to 6 for the molecules
    @for $i from 1 through 6 {
      &:nth-child(#{$i}) {
        width: map-get($sizes, $i);
        height: map-get($sizes, $i);
        
        // Check if the index is odd or even to determine spin direction
        @if ($i % 2 == 0) {
          animation: spin #{8 + 4 * ($i - 1)}s linear infinite; // Even: spin forward
        } @else {
          animation: spin-reverse #{8 + 4 * ($i - 1)}s linear infinite; // Odd: spin backward
        }

        &::before {
          background-color: map-get($primary-colors, $i);
          box-shadow: map-get($shadows, $i);
        }
      }
    }
  }
}

@keyframes spin {
  from {
    transform: rotate(var(--initial-rotate));
  }
  to {
    transform: rotate(calc(var(--initial-rotate) + 360deg));
  }
}

@keyframes spin-reverse {
  from {
    transform: rotate(var(--initial-rotate));
  }
  to {
    transform: rotate(calc(var(--initial-rotate) - 360deg));
  }
}
